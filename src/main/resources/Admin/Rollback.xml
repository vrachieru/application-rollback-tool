<?xml version="1.0" encoding="UTF-8"?>

<xwikidoc version="1.1">
  <web>Admin</web>
  <name>Rollback</name>
  <language/>
  <defaultLanguage/>
  <translation>0</translation>
  <creator>xwiki:XWiki.Admin</creator>
  <creationDate>1428576588000</creationDate>
  <parent>Main.WebHome</parent>
  <author>xwiki:XWiki.Admin</author>
  <contentAuthor>xwiki:XWiki.Admin</contentAuthor>
  <date>1428870689000</date>
  <contentUpdateDate>1428870689000</contentUpdateDate>
  <version>1.1</version>
  <title>Rollback</title>
  <comment/>
  <minorEdit>false</minorEdit>
  <syntaxId>xwiki/2.1</syntaxId>
  <hidden>false</hidden>
  <content>{{groovy}}

/*
 * Yeah, there are some improvements that can be brought to the design,
 * mainly due to the fact that some bits may resemble spaghetti code.
 * Mmm, spaghetti..
 */

import java.util.zip.ZipEntry;
import java.util.zip.ZipInputStream;

import org.joda.time.DateTime;
import org.joda.time.format.DateTimeFormatter;
import org.joda.time.format.DateTimeFormat;

/*
 * Configuration
 */

class Configuration {
  protected static xwiki;
  protected static context;
  protected static query;
  protected static out;
  protected static request;

  protected static dateFormatter;

  public static set(xwiki, context, query, out, request) {
    this.xwiki   = xwiki;
    this.context = context;
    this.query   = query;
    this.out     = out;
    this.request = request;

    // Create date formatter for general use
    this.dateFormatter = DateTimeFormat.forPattern("yyyy/MM/dd HH:mm");

    // Load the jsx on demand
    this.xwiki.jsx.use("Admin.Rollback");
  }
}


/*
 * Business logic for the rollback action
 */

class Rollback extends Configuration {
  private static documents     = [];
  private static criteria      = xwiki.criteriaService.revisionCriteriaFactory.createRevisionCriteria();
  private static rangeSize     = 0;
  private static deleteNoMatch = false;

  /**
   * Make plan
   *
   * @param method rollback method
   * @param date point in time from when to rollback
   * @param minorVersions include minor versions
   * @param deleteNoMatch delete document when it doesn't match criteria
   */
  public static makePlan(method, date, minorVersions, deleteNoMatch)
  {
    def range;
    def period;

    switch (method) {
      case "1.1":
        this.rangeSize = 1;
        range = this.xwiki.criteriaService.rangeFactory.getFIRST();
        break;
      case "previous-version":
        range = this.xwiki.criteriaService.rangeFactory.createTailRange(this.rangeSize = 2);
        break;
      case "before-date":
        try {
          range  = this.xwiki.criteriaService.rangeFactory.createTailRange(this.rangeSize = 1);
          period = this.xwiki.criteriaService.periodFactory.createPeriod(
                     this.xwiki.criteriaService.periodFactory.MIN_DATE.getMillis(),
                     this.dateFormatter.parseDateTime(date).getMillis()
                   )
        } catch (Exception ex) {}
        break;
    }

    if (period) {
      this.criteria.setPeriod(period);
    }

    if (range) {
      this.criteria.setRange(range);
    }

    this.criteria.setIncludeMinorVersions(minorVersions);

    this.deleteNoMatch = deleteNoMatch;
  }

  /**
   * Process source
   *
   * @param type source type
   * @param source information regarding the source
   * @return errors ecnountered during execution
   */
  public static processSource(type, source)
  {
    try {
      switch(type) {
        case "xar":
          if (source.startsWith("attach:")) {
            def document;
            def attachment;

            source = source.substring(7);

            if (source.contains("@")) {
              (document, attachment) = source.split("@");
            } else {
              document   = this.context.getDoc().getFullName();
              attachment = source;
            }
            this.documents = fromAttachmentXAR(document, attachment);
          } else {
            this.documents = fromFilesystemXAR(source);
          }
          break;
        case "query":
          this.documents = fromQuery(source);
          break;
        case "list":
          this.documents = fromList(source);
          break;
      }
    } catch (Exception ex) {
      return ex.message;
    }

    return null;
  }


  /**
   * Read XAR from attachment
   *
   * @param document name of the document containing the attachment
   * @param attachment name of the xar attachment
   * @return ZipInputStream for the specified file
   */
  private static fromAttachmentXAR(document, attachment) {
    if (!this.xwiki.exists(document)) {
      throw new Exception("The document specified as source does not exist.");
    }

    def xarDoc    = this.xwiki.getDocument(document);
    def xarAttach = xarDoc.getAttachment(attachment);

    if (xarAttach == null) {
      throw new Exception("Attachment does not exist on the document specified as source.");
    }

    def xarInputStream = xarAttach.getAttachment().getContentInputStream(this.context.context);

    ZipInputStream zipInputStream = new ZipInputStream(xarInputStream);

    return fromXAR(zipInputStream);
  }

  /**
   * Read XAR from filesystem
   *
   * @param path location of the xar file on the filesystem
   * @return ZipInputStream for the specified path
   */
  private static fromFilesystemXAR(path) {
    File xarFile = new File(path);

    InputStream xarInputStream    = new FileInputStream(xarFile);
    ZipInputStream zipInputStream = new ZipInputStream(xarInputStream);

    return fromXAR(zipInputStream);
  }

  /**
   * Read XAR
   *
   * @param path location of the xar file on the filesystem
   * @return ZipInputStream for the specified file
   */
  private static fromXAR(zipInputStream) {
    def documents = [];

    ZipEntry entry;

    while ((entry = zipInputStream.getNextEntry()) != null) {
      if(entry.getName() != "package.xml") {
        def docFullName = entry.getName().replace(".xml","").replace("/", ".");
        documents.push(docFullName);
      }
    }

    return documents;
  }

  /**
   * Get documents from query
   *
   * @param query hql statement
   * @return ArrayList of documents
   */
  private static fromQuery(query) {
    return this.query.hql(query).execute();
  }

  /**
   * Get documents from list
   *
   * @param list comma separated list of documents
   * @return ArrayList of documents
   */
  private static fromList(list) {
    return list.split(",")*.trim();
  }

  /**
   * Perform rollback
   *
   * @param preview just list the source documents or actually rollback
   * @return map of documents with aditional info regarding their state
   */
  private static perform(preview) {
    List&lt;Map&lt;String, String&gt;&gt; result = new LinkedList&lt;HashMap&lt;String, String&gt;&gt;();

    // Get list of selected documents from POST when performing the actual rollback
    if (!preview) {
      def counter    = 0;
      def maxCounter = Integer.parseInt(this.request.counter);

      this.documents = [];

      while (counter &lt;= maxCounter) {
        def filename = request.get("file_${counter++}")

        if (filename != null) {
          this.documents.add(filename);
        }
      }
    }

    // Iterate through the document list
    for (doc in this.documents) {
      Map&lt;String, String&gt; entry = new HashMap&lt;String, String&gt;();

      def exists       = this.xwiki.exists(doc);
      def match        = false;
      def author       = "";
      def lastModified = "";
      def status       = "";

      def currentRevision;
      def rollbackRevisions;
      def rollbackRevision;

      if (exists) {
        def rollbackDoc   = xwiki.getDocument(doc);

        author            = rollbackDoc.getAuthor();
        lastModified      = rollbackDoc.getDate().format("yyyy/MM/dd HH:mm");
        currentRevision   = rollbackDoc.getVersion();
        rollbackRevisions = rollbackDoc.getRevisions(this.criteria);

        if (rollbackRevisions.size() &gt;= this.rangeSize) {
          rollbackRevision = rollbackRevisions.get(0);
          match  = true;
          status = currentRevision == rollbackRevision ? "skip, same revision" : "ready to rollback";
        } else {
          status = this.deleteNoMatch ? "ready to delete" : "does not match criteria";
        }

        if (!preview) {
          try {
            if (match &amp;&amp; currentRevision != rollbackRevision) {
              this.xwiki.getXWiki().rollback(rollbackDoc.document, rollbackRevision, this.context.context);
              status = "rolled back";
            } else if (this.deleteNoMatch) {
              rollbackDoc.delete();
              status = "deleted";
            } else {
              status = "skipped, " + (!match ? "no match":"same revision");
            }
          } catch (Exception ex) {
            status = "failed";
          }
        }
      } else {
        status = "does not exist";
      }

      entry.put("doc", doc);
      entry.put("exists", exists);
      entry.put("match", match);
      entry.put("currentRev", currentRevision);
      entry.put("rollbackRev", rollbackRevision);
      entry.put("author", author);
      entry.put("lastModified", lastModified);
      entry.put("status", status);

      result.add(entry);
    }

    return result;
  }
}


/*
 * Helper class to aid in content generation
 */

class Helper extends Configuration {
  /**
   * Generate a html select element
   *
   * @param id the id assigned to the select element
   * @param name the name assigned to the select element
   * @param options a map containing the values and display values of the options
   * @return html content
   */
  public static generateSelect(id, name, options) {
    def output = "";

    output += """&lt;select id="${id}" name="${name}"&gt;""";
    for (option in options) {
      def selected = this.request.get(name) == option.getKey() ? " selected":"";
      output += """&lt;option value="${option.getKey()}"${selected}&gt;${option.getValue()}&lt;/option&gt;""";
    }
    output += """&lt;/select&gt;""";

    return output;
  }

  /**
   * Generate a html input element
   *
   * @param type element type
   * @param name element name
   * @param value element value
   * @return html content
   */
  public static generateInput(type, name, value) {
    generateInput(type, name, value, [:]);
  }

  /**
   * Generate a html input element
   *
   * @param type element type
   * @param name element name
   * @param value element value
   * @param args map of aditional parameters
   * @return html content
   */
  public static generateInput(type, name, value, args) {
    def output = "";

    // Initialize the DatePicker if value has been submitted
    if (
      args.class &amp;&amp;
      args.class.indexOf("datetime") &gt; -1 &amp;&amp;
      this.request.get(name) != null
    ) {
      try {
        args.class += " t" + this.dateFormatter.parseDateTime(this.request.get(name)).getMillis();
      } catch (Exception ex) {}
    }

    // Display submitted value instead of default if applicable
    if (this.request.get(name)) {
      value = this.request.get(name);
    }

    output += """&lt;input""";
    output += args.id ? """ id="${args.id}" """ : "";
    output += args.class ? """ class="${args.class}" """ : "";
    output += """ type="${type}" name="${name}" value="${value}" """;
    output += args.title ? """ title="${args.title}" """ : "";
    output += args.checked || this.request.get(name) ? " checked":"";
    output += args.disabled ? " disabled":"";
    output += """/&gt;""";

    return args.display != false ? output : "";
  }

  /**
   * Generate a html textarea element
   *
   * @param name element name
   * @param defaultValue default value
   * @return html content
   */
  public static generateTextarea(name, defaultValue) {
    def output = "";

    output += """&lt;textarea name="${name}" rows="2" cols="100"&gt;""";
    if (this.request.get(name)) {
      output += """${this.request.get(name)}""";
    } else {
      output += """${defaultValue}""";
    }
    output += """&lt;/textarea&gt;""";

    return output;
  }

  /**
   * Generate DatePicker element
   *
   * @param name name of the html element
   * @param format date format string
   * @param value default display value
   * @return html content
   */
  public static generateDatePicker(name, format, value) {
    generateDatePicker(name, format, value, [:]);
  }

  /**
   * Generate DatePicker element
   *
   * @param name name of the html element
   * @param format date format string
   * @param value default display value
   * @param args map of aditional parameters
   * @return html content
   */
  public static generateDatePicker(name, format, value, args) {
    // A simple date picker widget.
    this.xwiki.ssfx.use('uicomponents/widgets/datepicker/calendarDateSelect.css', true);
    this.xwiki.jsfx.use('uicomponents/widgets/datepicker/calendarDateSelect.js', true);

    // Used to parse and serialize the selected date using the date format specified in the XClass.
    this.xwiki.jsfx.use('uicomponents/widgets/datepicker/simpleDateFormat.js', true);

    // A wrapper over the CalendarDateSelect widget that uses the SimpleDateFormat to parse/serialize the dates.
    this.xwiki.ssfx.use('uicomponents/widgets/datepicker/dateTimePicker.css', true);
    this.xwiki.jsfx.use('uicomponents/widgets/datepicker/dateTimePicker.js');

    if (args.class) {
      args.class += " datetime";
    } else {
      args.put("class", "datetime");
    }

    args.title = format;

    return generateInput("text", name, value, args);
  }

  /**
   * Generate a html link element
   *
   * @param type the scope of the link
   * @param document the document towards the link points to
   * @return html content
   */
  public static generateLink(type, document) {
    generateLink(type, document, [:]);
  }

  /**
   * Generate a html link element
   *
   * @param type the scope of the link
   * @param document the document towards the link points to
   * @param args map of aditional parameters
   * @return html content
   */
  public static generateLink(type, document, args) {
    if(!this.xwiki.exists(document)) {
      def users = ["XWiki.superadmin", "XWiki.XWikiGuest"];
      return type == "user" &amp;&amp; users.contains(document) ? document.replace("XWiki.", "") : document;
    }

    def url;
    def text;

    switch(type) {
      case "document":
        url  = this.xwiki.getURL(document);
        text = document;
        break;
      case "user":
        def doc = this.xwiki.getDocument(document);
        def obj = doc.getObject("XWiki.XWikiUsers");
        url  = this.xwiki.getURL(document);
        text = obj.get("first_name") + obj.get("last_name");
        break;
      case "diff":
        url  = this.xwiki.getURL(
                 document,
                 "view",
                 "viewer=changes&amp;rev1=${args.get('fromRev')}&amp;rev2=${args.get('toRev')}"
               );
        text = "&amp;lt;/&amp;gt;";
        break;
    }

    return """&lt;a href="${url}" target="_blank"&gt;${text}&lt;/a&gt;""";
  }

  /**
   * Generate a html table element
   *
   * @param entries map of columns and rows
   * @return html content
   */
  public static generateTable(entries) {
    def columns = entries.get("columns");
    def rows    = entries.get("rows");
    def output  = "";

    output += """
      &lt;table&gt;
        &lt;tbody&gt;
    """;

    if (columns.size() &gt; 0) {
      output += """&lt;tr&gt;""";
      for (column in columns) {
        output += """&lt;th scope="col"&gt;${column}&lt;/th&gt;""";
      }
      output += """&lt;/tr&gt;""";
    }

    for (row in rows) {
      output += """&lt;tr&gt;""";
      for (entry in row) {
        output += """&lt;td&gt;"""
        if (entry.getClass().toString() == "class java.util.ArrayList") {
          for (element in entry) {
            output += element + " ";
          }
        } else {
          output += entry;
        }

        output += """&lt;/td&gt;""";
      }
      output += """&lt;/tr&gt;""";
    }

    output += """
      &lt;/tbody&gt;
        &lt;/table&gt;
    """;

    return output;
  }

  /**
   * Generate html form element
   *
   * @param action the action which will be performed on submit
   * @param method the submit method
   * @param content the html content contained within the form
   * @return html content
   */
  public static generateForm(action, method, content) {
    def output = "";

    output += """&lt;form action="${action}" method="${method}"&gt;""";
    output += """${content}""";
    output += """&lt;/form&gt;""";

    return output;
  }


  /**
   * Generate a html block
   *
   * @param print whether to print the content to the current display or not
   * @param content the html content contained within the block
   * @return html content
   */
  public static generateHtmlBlock(print, content) {
    def output = """
      {{html clean="false"}}
        ${content}
      {{/html}}
    """;

    if (print)
      this.out.println(output);

    return output;
  }

  /**
   * Generate a message box
   *
   * @param type the type of the messagebox (info/warning/error)
   * @param message the message to display
   * @return html content
   */
  public static generateMessageBox(type, message) {
    def output = """
      &lt;div class="box ${type}message"&gt;
        ${message}
      &lt;/div&gt;
    """;

    return output;
  }
}


/*
 * Configuration
 */

Configuration.set(xwiki, xcontext, services.query, out, request);


/*
 * Table descriptors
 */

def settingsTable = [
  "columns" : [],
  "rows"    : [
    [
      "Source:",
      Helper.generateTextarea(
        "source",
        "attach:Space.Page@attachment.xar"
      )
    ],
    [
      "Source type:",
      Helper.generateSelect(
        "sourceType",
        "type",
        [
          "xar"   : "xar",
          "query" : "hql query",
          "list"  : "comma separated list"
        ]
      )
    ],
    [
      "Rollback method:",
      [
        Helper.generateSelect(
          "rollbackMethod",
          "rollbackMethod",
          [
            "1.1"              : "first known version",
            "previous-version" : "previous version",
            "before-date"      : "before date"
          ]
        ),
        Helper.generateDatePicker(
          "rollbackDate",
          "yyyy/MM/dd HH:mm",
          "",
          [
            "id"    : "rollbackDate",
            "class" : "hidden"
          ]
        )
      ]
    ],
    [
      "Include minor versions:",
      Helper.generateInput(
        "checkbox",
        "minorVersions",
        "minorVersions",
        [
          "checked" : !request.source
        ]
      )
    ],
    [
      "Delete if there's no criteria match:",
      Helper.generateInput(
        "checkbox",
        "deleteNoMatch",
        "deleteNoMatch"
      )
    ],
    [
      "",
      [
        Helper.generateInput(
          "submit",
          "listDocuments",
          "List documents",
          [
            "class" : "btn btn-info"
          ]
        ),
        Helper.generateInput(
          "submit",
          "performRollback",
          "Perform rollback",
          [
            "class"   : "btn btn-success",
            "display" : request.listDocuments != null
          ]
        )
      ]
    ]
  ]
];

def documentsTable = [
  "columns" : [
    "Document",
    "Rollback",
    "Author",
    "Last modified",
    "Status"
  ],
  "rows" : []
];


/*
 * Populate documents table
 */

def errors;

if (request.source) {
  if (request.listDocuments) {
    documentsTable.get("columns").add(
      0,
      Helper.generateInput(
        "checkbox",
        "",
        "",
        [
          "id"      : "selectAll",
          "checked" : true
        ]
      )
    );
  }

  Rollback.makePlan(
    request.rollbackMethod,
    request.rollbackDate,
    request.minorVersions != null,
    request.deleteNoMatch != null
  );

  errors = Rollback.processSource(request.type, request.source.trim());

  if (!errors) {
    def counter = 0;
    def results = Rollback.perform(request.listDocuments);

    for (entry in results) {
      def row    = [];
      def exists = entry.get("exists");
      def match  = entry.get("match");

      if (request.listDocuments) {
        row.add(Helper.generateInput(
          "checkbox",
          "file_${counter++}",
          "${entry.get('doc')}",
          [
            "class"    : "sourceEntry",
            "checked"  : (exists &amp;&amp; request.listDocuments),
            "disabled" : !exists
          ]
        ));
      }

      row.add(exists ? Helper.generateLink(
                         "document",
                         entry.get("doc")
                       )
                       :
                       entry.get("doc")
      );

      row.add(exists ? "v" + entry.get('currentRev') + " " + ( match ?
                       Helper.generateLink(
                         "diff",
                         entry.get("doc"),
                         [
                           "fromRev" : entry.get('currentRev'),
                           "toRev"   : entry.get('rollbackRev')
                         ]
                       ) +
                       " v" + entry.get('rollbackRev') : "")
                       :
                       ""
      );

      row.add(exists ? Helper.generateLink(
                         "user",
                         entry.get('author')
                       )
                       :
                       ""
      );

      row.add(entry.get('lastModified'));
      row.add(entry.get('status'));

      documentsTable.rows.add(row);
    }

    settingsTable.rows.get(settingsTable.rows.size() - 1).add(
      [
        Helper.generateInput(
          "hidden",
          "counter",
          "${counter}"
        )
      ]
    );
  }
}


/*
 * Generate and display content
 */

Helper.generateHtmlBlock(
  true,
  Helper.generateForm(
    "",
    "POST",
    Helper.generateTable(settingsTable) +
    (errors ? Helper.generateMessageBox("error", errors) : "") +
    (request.get("source") &amp;&amp; !errors ? Helper.generateTable(documentsTable) : "")
  )
);
{{/groovy}}</content>
  <object>
    <name>Admin.Rollback</name>
    <number>0</number>
    <className>XWiki.JavaScriptExtension</className>
    <guid>de4e1414-5b83-4132-972c-2578a66bbeed</guid>
    <class>
      <name>XWiki.JavaScriptExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators> ,|</separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <disabled>0</disabled>
        <name>code</name>
        <number>2</number>
        <prettyName>Code</prettyName>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators> ,|</separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage|onDemand|always</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <property>
      <cache>long</cache>
    </property>
    <property>
      <code>(function() {
  function init() {
    var selectAll = document.getElementById("selectAll");
    var rollbackMethod = document.getElementById("rollbackMethod");

    if (selectAll) {
      selectAll.addEventListener("click", function() {
        checkAll(this.checked);
      });
    }

    rollbackMethod.addEventListener("change", function() {
      toggleInputs(this.value);
    });

    toggleInputs(rollbackMethod.value);

    return true;
  }

  function checkAll(checked) {
    var entries = document.getElementsByClassName("sourceEntry");

    for (var i = 0; i &lt; entries.length; i++) {
      if (!entries[i].disabled) {
        entries[i].checked = checked;
      }
    }
  }

  function toggleInputs(method) {
    var rollbackDate   = document.getElementById("rollbackDate");

    switch(method) {
      case "before-date":
        rollbackDate.classList.remove("hidden");
        break;
      default:
        rollbackDate.classList.add("hidden");
    }
  }

(XWiki.domIsLoaded &amp;&amp; init()) || document.observe('xwiki:dom:loaded', init);
})();</code>
    </property>
    <property>
      <name/>
    </property>
    <property>
      <parse/>
    </property>
    <property>
      <use>currentPage</use>
    </property>
  </object>
</xwikidoc>
